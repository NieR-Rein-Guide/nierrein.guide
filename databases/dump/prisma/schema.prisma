generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model character {
  character_id         Int                    @id(map: "pk_character") @default(autoincrement())
  slug                 String?
  name                 String?
  image_path           String?
  debris_id            Int?
  debris               debris?                @relation(fields: [debris_id], references: [debris_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_character_debris_debris_id")
  character_rank_bonus character_rank_bonus[]
  costume              costume[]

  @@index([debris_id], map: "ix_character_debris_id")
}

model character_rank_bonus {
  rank_bonus_id    Int
  rank_bonus_level Int
  character_id     Int
  description      String?
  stat             String?
  type             String?
  amount           Int
  character        character @relation(fields: [character_id], references: [character_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_character_rank_bonus_character_character_id")

  @@id([character_id, rank_bonus_id, rank_bonus_level], map: "pk_character_rank_bonus")
}

model companion {
  companion_id           Int                      @id(map: "pk_companion") @default(autoincrement())
  attribute              String?
  type                   Int
  release_time           DateTime                 @db.Timestamptz(6)
  name                   String?
  story                  String?
  image_path_base        String?
  companion_ability_link companion_ability_link[]
  companion_skill_link   companion_skill_link[]
  companion_stat         companion_stat[]
}

model companion_ability {
  ability_id             Int
  ability_level          Int
  name                   String?
  description            String?
  image_path_base        String?
  behaviour_types        String[]
  companion_ability_link companion_ability_link[]

  @@id([ability_id, ability_level], map: "pk_companion_ability")
}

model companion_ability_link {
  companion_id      Int
  companion_level   Int
  ability_id        Int
  ability_level     Int
  companion_ability companion_ability @relation(fields: [ability_id, ability_level], references: [ability_id, ability_level], onDelete: Cascade, onUpdate: NoAction, map: "fk_companion_ability_link_companion_ability_ability_id1_abilit")
  companion         companion         @relation(fields: [companion_id], references: [companion_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_companion_ability_link_companion_companion_id")

  @@id([companion_id, companion_level, ability_id, ability_level], map: "pk_companion_ability_link")
  @@index([ability_id, ability_level], map: "ix_companion_ability_link_ability_id_ability_level")
}

model companion_skill {
  skill_id             Int
  skill_level          Int
  cooldown_time        Int
  name                 String?
  description          String?
  short_description    String?
  image_path           String?
  act_type             String?
  behaviour_types      String[]
  companion_skill_link companion_skill_link[]

  @@id([skill_id, skill_level], map: "pk_companion_skill")
}

model companion_skill_link {
  companion_id    Int
  companion_level Int
  skill_id        Int
  skill_level     Int
  companion       companion       @relation(fields: [companion_id], references: [companion_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_companion_skill_link_companion_companion_id")
  companion_skill companion_skill @relation(fields: [skill_id, skill_level], references: [skill_id, skill_level], onDelete: Cascade, onUpdate: NoAction, map: "fk_companion_skill_link_companion_skill_skill_id1_skill_level1")

  @@id([companion_id, companion_level, skill_id, skill_level], map: "pk_companion_skill_link")
  @@index([skill_id, skill_level], map: "ix_companion_skill_link_skill_id_skill_level")
}

model companion_stat {
  companion_id Int
  level        Int
  atk          Int
  hp           Int
  vit          Int
  companion    companion @relation(fields: [companion_id], references: [companion_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_companion_stat_companion_companion_id")

  @@id([companion_id, level], map: "pk_companion_stat")
}

model costume {
  costume_id           Int                    @id(map: "pk_costume") @default(autoincrement())
  character_id         Int
  asset_id             String?
  emblem_id            Int?
  debris_id            Int?
  weapon_type          String?
  rarity               String?
  release_time         DateTime               @db.Timestamptz(6)
  is_ex_costume        Boolean
  is_rd_costume        Boolean
  slug                 String?
  title                String?
  description          String?
  image_path_base      String?
  character            character              @relation(fields: [character_id], references: [character_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_costume_character_character_id")
  debris               debris?                @relation(fields: [debris_id], references: [debris_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_costume_debris_debris_id")
  emblem               emblem?                @relation(fields: [emblem_id], references: [emblem_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_costume_emblem_emblem_id")
  costume_ability_link costume_ability_link[]
  costume_skill_link   costume_skill_link[]
  costume_stat         costume_stat[]

  @@index([character_id], map: "ix_costume_character_id")
  @@index([emblem_id], map: "ix_costume_emblem_id")
  @@index([debris_id], map: "ix_costume_debris_id")
}

model costume_ability {
  ability_id           Int
  ability_level        Int
  name                 String?
  description          String?
  image_path_base      String?
  behaviour_types      String[]
  costume_ability_link costume_ability_link[]

  @@id([ability_id, ability_level], map: "pk_costume_ability")
}

model costume_ability_link {
  costume_id      Int
  ability_slot    Int
  ability_id      Int
  ability_level   Int
  is_awaken       Boolean
  costume_ability costume_ability @relation(fields: [ability_id, ability_level], references: [ability_id, ability_level], onDelete: Cascade, onUpdate: NoAction, map: "fk_costume_ability_link_costume_ability_costume_ability_abilit")
  costume         costume         @relation(fields: [costume_id], references: [costume_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_costume_ability_link_costume_costume_id")

  @@id([costume_id, ability_slot, ability_id, ability_level], map: "pk_costume_ability_link")
  @@index([ability_id, ability_level], map: "ix_costume_ability_link_ability_id_ability_level")
}

model costume_skill {
  skill_id           Int
  skill_level        Int
  gauge_rise_speed   String?
  cooldown_time      Int
  name               String?
  description        String?
  short_description  String?
  image_path         String?
  act_type           String?
  behaviour_types    String[]
  costume_skill_link costume_skill_link[]

  @@id([skill_id, skill_level], map: "pk_costume_skill")
}

model costume_skill_link {
  costume_id    Int
  skill_id      Int
  skill_level   Int
  costume       costume       @relation(fields: [costume_id], references: [costume_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_costume_skill_link_costume_costume_id")
  costume_skill costume_skill @relation(fields: [skill_id, skill_level], references: [skill_id, skill_level], onDelete: Cascade, onUpdate: NoAction, map: "fk_costume_skill_link_costume_skill_costume_skill_skill_id_cos")

  @@id([costume_id, skill_id, skill_level], map: "pk_costume_skill_link")
  @@index([skill_id, skill_level], map: "ix_costume_skill_link_skill_id_skill_level")
}

model costume_stat {
  costume_id     Int
  level          Int
  awakening_step Int
  agi            Int
  atk            Int
  crit_atk       Int
  crit_rate      Int
  eva_rate       Int
  hp             Int
  vit            Int
  costume        costume @relation(fields: [costume_id], references: [costume_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_costume_stat_costume_costume_id")

  @@id([costume_id, level, awakening_step], map: "pk_costume_stat")
}

model debris {
  debris_id         Int         @id(map: "pk_debris") @default(autoincrement())
  rarity            String?
  release_time      DateTime    @db.Timestamptz(6)
  name              String?
  description_short String?
  description_long  String?
  image_path_base   String?
  character         character[]
  costume           costume[]
}

model emblem {
  emblem_id      Int       @id(map: "pk_emblem") @default(autoincrement())
  name           String?
  main_message   String?
  small_messages String?
  image_path     String?
  costume        costume[]
}

model memoir {
  memoir_id           Int
  lottery_id          Int
  series_id           Int
  rarity              String?
  release_time        DateTime      @db.Timestamptz(6)
  name                String?
  story               String?
  image_path_base     String?
  is_variation_memoir Boolean
  memoir_series       memoir_series @relation(fields: [series_id], references: [memoir_series_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_memoir_memoir_series_series_id")

  @@id([memoir_id, lottery_id], map: "pk_memoir")
  @@index([series_id], map: "ix_memoir_series_id")
}

model memoir_series {
  memoir_series_id      Int      @id(map: "pk_memoir_series") @default(autoincrement())
  name                  String?
  small_set_description String?
  large_set_description String?
  memoir                memoir[]
}

model notification {
  notification_id  Int       @id(map: "pk_notification") @default(autoincrement())
  information_type String?
  title            String?
  body             String?
  release_time     DateTime? @db.Timestamptz(6)
  thumbnail_path   String?
}

model weapon {
  weapon_id             Int                   @id(map: "pk_weapon") @default(autoincrement())
  asset_id              String?
  evolution_group_id    Int
  evolution_order       Int
  weapon_type           String?
  rarity                String?
  attribute             String?
  is_ex_weapon          Boolean
  is_subjugation_weapon Boolean
  is_rd_weapon          Boolean
  release_time          DateTime?             @db.Timestamptz(6)
  slug                  String?
  name                  String?
  image_path            String?
  weapon_ability_link   weapon_ability_link[]
  weapon_skill_link     weapon_skill_link[]
  weapon_stat           weapon_stat[]
  weapon_story_link     weapon_story_link[]

  @@unique([evolution_group_id, evolution_order], map: "ak_weapon_evolution_group_id_evolution_order")
}

model weapon_ability {
  ability_id          Int
  ability_level       Int
  name                String?
  description         String?
  image_path_base     String?
  behaviour_types     String[]
  weapon_ability_link weapon_ability_link[]

  @@id([ability_id, ability_level], map: "pk_weapon_ability")
}

model weapon_ability_link {
  weapon_id      Int
  slot_number    Int
  ability_id     Int
  ability_level  Int
  is_awaken      Boolean
  weapon_ability weapon_ability @relation(fields: [ability_id, ability_level], references: [ability_id, ability_level], onDelete: Cascade, onUpdate: NoAction, map: "fk_weapon_ability_link_weapon_ability_weapon_ability_ability_i")
  weapon         weapon         @relation(fields: [weapon_id], references: [weapon_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_weapon_ability_link_weapon_weapon_id")

  @@id([weapon_id, slot_number, ability_id, ability_level], map: "pk_weapon_ability_link")
  @@index([ability_id, ability_level], map: "ix_weapon_ability_link_ability_id_ability_level")
}

model weapon_skill {
  skill_id          Int
  skill_level       Int
  cooldown_time     Int
  name              String?
  description       String?
  short_description String?
  image_path        String?
  act_type          String?
  behaviour_types   String[]
  weapon_skill_link weapon_skill_link[]

  @@id([skill_id, skill_level], map: "pk_weapon_skill")
}

model weapon_skill_link {
  weapon_id    Int
  slot_number  Int
  skill_id     Int
  skill_level  Int
  weapon_skill weapon_skill @relation(fields: [skill_id, skill_level], references: [skill_id, skill_level], onDelete: Cascade, onUpdate: NoAction, map: "fk_weapon_skill_link_weapon_skill_weapon_skill_skill_id_weapon")
  weapon       weapon       @relation(fields: [weapon_id], references: [weapon_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_weapon_skill_link_weapon_weapon_id")

  @@id([weapon_id, slot_number, skill_id, skill_level], map: "pk_weapon_skill_link")
  @@index([skill_id, skill_level], map: "ix_weapon_skill_link_skill_id_skill_level")
}

model weapon_stat {
  weapon_id  Int
  level      Int
  atk        Int
  hp         Int
  vit        Int
  is_refined Boolean
  weapon     weapon  @relation(fields: [weapon_id], references: [weapon_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_weapon_stat_weapon_weapon_id")

  @@id([weapon_id, level], map: "pk_weapon_stat")
}

model weapon_story {
  id                Int                 @id(map: "pk_weapon_story") @default(autoincrement())
  story             String?
  weapon_story_link weapon_story_link[]
}

model weapon_story_link {
  weapon_id       Int
  weapon_story_id Int
  weapon_story    weapon_story @relation(fields: [weapon_story_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_weapon_story_link_weapon_story_weapon_story_id")
  weapon          weapon       @relation(fields: [weapon_id], references: [weapon_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_weapon_story_link_weapon_weapon_id")

  @@id([weapon_id, weapon_story_id], map: "pk_weapon_story_link")
  @@index([weapon_story_id], map: "ix_weapon_story_link_weapon_story_id")
}
